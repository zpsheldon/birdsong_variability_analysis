function [W,sigma,psi,phi,omega,lambda,iter,degflg,z,u,q,j,y,logp] = CFA_full2(X,Q,m,W0,sigma0,psi0,phi0,omega0,lambda0,D,R,V,conv_crit)
% [W,sigma,psi,phi,iter,degflg,z,u,q,logp,wmat,sigmamat,psimat,phimat] = CFA_jitter(X,Q,m,W0,sigma0,psi0,phi0)
% returns parameters of the factor analysis model described in Glaze (2008) 
%
%
% FUNCTION RETURNS
% W: dXm matrix of factor weights, d is # of dimensions in data set, m is #
% of factor weights. 
%
% sigma: dX1 vector of jitter variances
%
% psi: dX1 vector of residual (independent) variances
%
% phi: pX1 matrix of repeated variances, p is # of unique dimensions that
% are repeated
%
% iter: number of iterations needed for convergence
% degflg: flag indicating whether routine was terminated due to a
% degenerate matrix
%
% z: nXm matrix with global factors
% u: nXd matrix of jitter factors
% q: nXp matrix of repeated independent factors
%
% logp: iterX1 vector the model log probability after each iteration
% wmat, sigmamat, psimat, phimat: iterXdXm, iterXd, iterXd, and iterXp
% matrices of parameter estimates after each iteration
%
% FUNCTION ARGUMENTS
% X: nXd matrix of data, n = # of samples, d is # of dimensions
%
% Q: a weight matrix for repeated noise, each row corresponds to a
% dimension of X, each column is a "repeat-factor". Q(i,j) = 1 if dimension
% i is influenced by factor j, 0 otherwise
%
% m is the number of global parameters to estimate
%
% W0, sigma0, psi0, phi0: optional arguments giving initial conditions for
% parameter estimates


% maximum number of iterations
maxiter = 10000;

[n,d] = size(X);

X = X - repmat(mean(X),n,1);
% X = X ./ repmat(std(X),n,1);

% calculate jitter weight matrix in D, where multiplication by D is
% equivalent to differencing

if nargin < 10
    D = inv(tril(ones(d)));
end

if nargin < 11
    R = D*Q;
end

if nargin < 13
    conv_crit = 0.01;
end


Dd = size(D,2);
Qd = size(Q,2);
Rd = size(R,2);
Vd = size(V,2);

% calculate biased covariance matrix in C, variances in vr
C = X'*X/n;
vr = diag(C);

if nargin < 4
    
    % if no initial conditions are given, choose them at random by scaling
    % standard deviation or variances by a random number in [0,1]

    W0 = repmat(sqrt(vr),1,m).*rand(d,m);    

    psi0 = diag(vr.*rand(d,1));
    
    sigma0 = diag(D'*diag(vr.*rand(d,1))*D ./ diag(diag(D'*D)));
    phi0 = diag(Q'*diag(vr.*rand(d,1))*Q ./ diag(diag(Q'*Q)));
    omega0 = diag(R'*diag(vr.*rand(d,1))*R ./ diag(diag(R'*R)));
    lambda0 = diag(V'*diag(vr.*rand(d,1))*V ./ diag(diag(V'*V)));

end

% initalized parameter estimates

W = W0;
sigma = sigma0;
psi = psi0;
phi = phi0;
omega = omega0;
lambda = lambda0;

if nargout > 12
    logp = zeros(maxiter,1);
end

iter = 1;
% 
% sigmamat = zeros(maxiter,max(Dd,1));
% psimat = zeros(maxiter,d);
% wmat = zeros(maxiter,d,max(m,1));
% phimat = zeros(maxiter,max(Qd,1));
% omegamat = zeros(maxiter,max(Rd,1));
% lambdamat = zeros(maxiter,max(Vd,1));
% 
% psimat(iter,:) = diag(psi);
% 
% if m > 0
%     wmat(iter,:,:) = W;
% end
% 
% if Qd > 0
%     phimat(iter,:) = diag(phi);
% end
% 
% if Rd > 0
%     omegamat(iter,:) = diag(omega);
% end
% 
% if Dd > 0
%     sigmamat(iter,:) = diag(sigma);
% end
% 
% if Vd > 0
%     lambdamat(iter,:) = diag(lambda);
% end

% throughout Chat is the estimated covariance matrix, log-likelihood
% follows Bishop (2006)
Chat = W*W' + D*diag(sigma)*D' + Q*diag(phi)*Q' + diag(psi) + R*diag(omega)*R' + V*diag(lambda)*V';
logp(iter) = -n/2*(d*log(2*pi) + log(det(Chat)) + trace(inv(Chat)*C));

detsigma = prod(sigma);
detpsi = prod(psi);
detphi = prod(phi);
detomega = prod(omega);
detlambda = prod(lambda);

% deltaflg = 1 indicates lack of convergence
deltaflg = 1;

% degflg indicates degeneracy of at least 1 non-global matrix (expected global
% variance = 1 always)
degflg = detsigma > 0 & detpsi > 0 & detphi > 0 & detomega > 0 & detlambda > 0;

WDQRV = [W D Q R V];
DQRV = [D Q R V];
WDQRV = [W DQRV];
mones = ones(m,1);
C_zuqjy = [mones;sigma;phi;omega;lambda];

while iter < maxiter && degflg && deltaflg

    % EM algorithm for estimating parameters as described in Glaze (2008),
    % based in EM for traditional factor analysis in Bishop (2006)
    
    invpsi = diag(1./psi);
    G_zuqjy = inv(diag(1./C_zuqjy) + WDQRV'*invpsi*WDQRV);
    
    zuqjy = X*invpsi*WDQRV*G_zuqjy;
    zuqjy2sm = zuqjy'*zuqjy + n*G_zuqjy;
    
    sigma = diag(zuqjy2sm(m+1:m+Dd,m+1:m+Dd)) / n;
    phi = diag(zuqjy2sm(m+Dd+1:m+Dd+Qd,m+Dd+1:m+Dd+Qd)) / n;
    omega = diag(zuqjy2sm(m+Dd+Qd+1:m+Dd+Qd+Rd,m+Dd+Qd+1:m+Dd+Qd+Rd)) / n;
    lambda = diag(zuqjy2sm(m+Dd+Qd+Rd+1:m+Dd+Qd+Rd+Vd,m+Dd+Qd+Rd+1:m+Dd+Qd+Rd+Vd)) / n;

    Xzuqjy = X'*zuqjy;
    
    invzuqjy2sm = inv(zuqjy2sm);
    
    W_prev = W;
    W = Xzuqjy(:,1:m) * invzuqjy2sm(1:m,1:m);

    C_zuqjy_prev = C_zuqjy;
    C_zuqjy = [mones;sigma;phi;omega;lambda];

    WDQR = [W DQRV];
    
    psi = diag(C + (WDQRV*zuqjy2sm*WDQRV' - 2*Xzuqjy*WDQRV')/n);
    
    detsigma = prod(sigma);
    detpsi = prod(psi);
    detphi = prod(phi);
    detomega = prod(omega);   
    detlambda = prod(lambda);

    iter = iter + 1;
    
    if nargout > 13
        Chat = W*W' + D*diag(sigma)*D' + Q*diag(phi)*Q' + diag(psi) + R*diag(omega)*R' + V*diag(lambda)*V';
        logp(iter) = -n/2*(d*log(2*pi) + log(det(Chat)) + trace(inv(Chat)*C));
    end

%     if Qd > 0
%         phimat(iter,:) = diag(phi);
%     end
%     
%     if m > 0
%         wmat(iter,:,:) = W;
%     end
%     
%     if Dd > 0
%         sigmamat(iter,:) = diag(sigma);
%     end
%     
%     if Rd > 0
%         omegamat(iter,:) = diag(omega);
%     end
%     
%     if Vd > 0
%         lambdamat(iter,:) = lambda;
%     end
%     
%     psimat(iter,:) = diag(psi);

    % settle on estimates if all variance parameters have changed by <
    % conv_crit squared-units from the pervious iteration and global weight estimates
    % have changed by < sqrt(conv_crit) units
    
   Wdiff = max(abs(W(:)-W_prev(:)));
   
   if m == 0
       Wdiff = 0;
   en
   
   deltaflg = max(abs(C_zuqjy - C_zuqjy_prev)) < conv_crit && Wdiff < sqrt(conv_crit);
   degflg = detsigma > 0 & detpsi > 0 & detphi > 0 & detomega > 0 & detlambda > 0;
   
end
% 
% psimat = psimat(1:iter,:);
% sigmamat = sigmamat(1:iter,:);
% wmat = wmat(1:iter,:,:);
% phimat = phimat(1:iter,:);
% omegamat = omegamat(1:iter,:);
% lambdamat = lambdamat(1:iter,:);

if nargout > 9
    logp = logp(1:iter);
end

z = zuqjy(:,1:m);
u = zuqjy(:,m+1:m+Dd);
q = zuqjy(:,m+Dd+1:m+Dd+Qd);
j = zuqjy(:,m+Dd+Qd+1:m+Dd+Qd+Rd);
y = zuqjy(:,m+Dd+Qd+Rd+1:m+Dd+Qd+Rd+Vd);