function [w,D,d]=dtwDist2(x,y,pwt,xvarmat)
% function [w,D,d]=dtwDist(x,y,pwt,xvarmat)
% DTW function based on Euclidean distance

[rows,N]=size(x);
[rows,M]=size(y);

if nargin < 3
    pwt = [1.5 1.5 1];
end

%distance matrix. xvarmat is optional sum of squares for x (generated by
%distMat if not given)
if nargin < 4
    d = distMat(x,y);
else
    d = distMat(x,y,xvarmat);
end

%paramters restrict path to inner-third map diagonals (Sakoe-Chiba band)
fct = 1/3;
mlim = round(M*fct);
% mlim = min([2,mlim]);

d2 = -(d-max(d(:)));

%cumulative score matrix
D = mkCumProd(d2,pwt,M,N,mlim);

[i,j] = find(D);
inds = find(i==N | j ==M);
Dvals = sub2ind(size(D),i,j);
[dmy,minind] = max(Dvals(inds));
n=i(inds(minind));
m=j(inds(minind));

k=1;
k_d = 1;

%backwards path tracing, stored in w

w = zeros(N+M,2);
w(1,:)=[n,m];

while n > 2 & m > 2
    
    P1 = .5*d2(n,m) + .25*d2(n-1,m) + .25*d2(n-1,m-1);
    P2 = .5*d2(n,m) + .25*d2(n,m-1) + .25*d2(n-1,m-1);
    P3 = d2(n,m);

    pts = [D(n-2,m-1),D(n-1,m-2),D(n-1,m-1)];
    pthset = pts + [P1,P2,P3] .* pwt;

    [values,number] = max(pthset);
    
    k=k+1;

    switch number
        case 1
                      
            n=n-1;
            m=m-.5;
            w(k,:) = [n,m];
      
            k=k+1;
            n=n-1;
            m=m-.5;
            w(k,:) = [n,m];
            
        case 2
       
            n=n-1;
            m=m-2;
            w(k,:) = [n,m];
            

        case 3
            n=n-1;
            m=m-1;
            w(k,:) = [n,m];
            

    end

    
    
end


% calculate endings. max/min functions not used above in order to save
% processing time.

if w(k,1)>1 & w(k,2)>1

    if w(k,1)==2 & w(k,2)==2
        k = k+1;
   
        n = n-1;
        m = m-1;
        w(k,:) = [n,m];

    elseif w(k,1)==2

        P2 = .5*d2(n,m) + .25*d2(n,m-1) + .25*d2(n-1,m-1);
        P3 = d2(n,m);

        pts = [D(n-1,m-2),D(n-1,m-1)];
        pthset = pts + [P2,P3] .* pwt(2:3);

        [values,number] = max(pthset);

        k=k+1;

        switch number

            case 1           
                n=n-1;
                m=m-2;
                w(k,:) = [n,m];

            case 2
            
                n=n-1;
                m=m-1;
                w(k,:) = [n,m];
        end

    else

        P1 = .5*d2(n,m) + .25*d2(n-1,m) + .25*d2(n-1,m-1);
        P3 = d2(n,m);

        pts = [D(n-2,m-1),D(n-1,m-1)];
        pthset = pts + [P1,P3] .* pwt([1 3]);

        [values,number] = max(pthset);

        k=k+1;

        switch number
            case 1
            n=n-1;
                m=m-.5;
                w(k,:) = [n,m];
              
                k=k+1;
                n=n-1;
                m=m-.5;
                w(k,:) = [n,m];

            case 2
                n=n-1;
                m=m-1;
                w(k,:) = [n,m];


        end

    end

end

w = w(1:k,:);